import re
from typing import List, Dict
from shared_state import SectionData # Assuming SectionData is defined here

def _create_anchor_link(title: str) -> str:
    """Helper function to create a Markdown anchor link from a title."""
    # Convert to lowercase, replace spaces with hyphens
    # Remove characters that are not alphanumeric, space, or hyphen
    # Ensure it doesn't start or end with a hyphen
    title = title.lower()
    title = re.sub(r'[^\w\s-]', '', title) # Keep alphanumeric, spaces, hyphens
    title = re.sub(r'\s+', '-', title)    # Replace spaces with hyphens
    title = title.strip('-')              # Remove leading/trailing hyphens
    return title

def generate_placeholder_intro_conclusion(topic: str) -> tuple[str, str]:
    """
    Generates more informative placeholder introduction and conclusion content.
    """
    introduction_text = (
        f"This report presents a comprehensive analysis of {topic}. It delves into various facets, "
        "examining current research, emerging trends, and potential implications. The objective of this document "
        "is to provide a detailed overview and synthesized understanding of the subject matter, drawing from "
        "a wide range of available information and expert perspectives. Each section of this report will build "
        "upon the last, offering deeper insights into the complexities and nuances of {topic}."
    )
    conclusion_text = (
        f"In conclusion, the exploration of {topic} undertaken in this report reveals a multifaceted and dynamic field. "
        "Key findings indicate [mention a generic key finding area, e.g., 'significant advancements and ongoing challenges']. "
        "The synthesis of information from various sources underscores the importance of [mention a generic theme, e.g., 'continued research and collaborative efforts']. "
        "While this report has aimed to be comprehensive, {topic} is an evolving area, and future work will undoubtedly uncover further details. "
        "The insights presented herein are intended to provide a solid foundation for understanding and to stimulate further inquiry."
    )
    return introduction_text, conclusion_text

def assemble_report_markdown(
    report_title: str,
    introduction: str, # This is now the text generated by generate_placeholder_intro_conclusion or a custom one
    sections_data: Dict[str, SectionData], # Expects an ordered dict or relies on Python 3.7+ dict insertion order
    conclusion: str, # Similar to introduction
    references_list: List[str],
    topic: str # Added topic for subtitle, can be extracted from report_title if preferred
) -> str:
    """
    Assembles the final report in Markdown format with Title Page, ToC, etc.
    """
    report_parts = []

    # --- Title Page ---
    report_parts.append(f"# {report_title}\n")
    report_parts.append(f"_A Comprehensive Research Report on: {topic}_\n")
    report_parts.append(f"_Date: {__import__('datetime').date.today().isoformat()}_\n") # Add current date
    report_parts.append("\n---\n") # Horizontal rule

    # --- Table of Contents (ToC) ---
    report_parts.append("## Table of Contents\n")
    # Add Introduction, main sections, Conclusion, and References to ToC
    toc_items = ["Introduction"] + list(sections_data.keys()) + ["Conclusion", "References"]

    for item_title in toc_items:
        anchor = _create_anchor_link(item_title)
        report_parts.append(f"* [{item_title}](#{anchor})")
    report_parts.append("\n\n---\n") # Separator

    # --- Introduction ---
    intro_anchor = _create_anchor_link("Introduction")
    report_parts.append(f"<a name=\"{intro_anchor}\"></a>\n## Introduction\n")
    report_parts.append(introduction)
    report_parts.append("\n\n---\n")

    # --- Main Content Sections ---
    # The caller (compile_report_node in workflow_graph.py) should ensure sections_data
    # is ordered according to state.initial_outline.
    # If Introduction/Conclusion/References are part of sections_data from the planner,
    # they might be duplicated if not handled carefully.
    # The current ToC logic includes them based on standard names.
    # The loop below should ideally only process actual content sections.

    for section_title, data in sections_data.items():
        # Skip if title is 'Introduction', 'Conclusion', 'References' as they are handled separately
        # This check is important if sections_data could contain these as keys from the planner.
        if section_title.lower() in ["introduction", "conclusion", "references"]:
            continue

        anchor = _create_anchor_link(section_title)
        report_parts.append(f"<a name=\"{anchor}\"></a>\n## {data.title}\n") # Use data.title for exact casing
        if data.draft_content:
            report_parts.append(data.draft_content)
        else:
            report_parts.append(f"_Content for {data.title} is not available or yet to be drafted._")
        report_parts.append("\n\n---\n") # Separator after each section

    # --- Conclusion ---
    conclusion_anchor = _create_anchor_link("Conclusion")
    report_parts.append(f"<a name=\"{conclusion_anchor}\"></a>\n## Conclusion\n")
    report_parts.append(conclusion)
    report_parts.append("\n\n---\n")

    # --- References ---
    references_anchor = _create_anchor_link("References")
    report_parts.append(f"<a name=\"{references_anchor}\"></a>\n## References\n")
    if references_list:
        for i, ref in enumerate(references_list):
            report_parts.append(f"{i+1}. {ref}") # Numbered list for references
    else:
        report_parts.append("_No specific references were compiled for this report version._")

    report_parts.append("\n")

    return "\n".join(report_parts)

if __name__ == '__main__':
    # Example Usage (for testing this module independently)
    from shared_state import SectionData # Re-import for example if needed
    import collections

    print("Testing report_assembler.py with new implementations...\n")

    # 1. Test generate_placeholder_intro_conclusion
    topic_example = "The Societal Impact of Quantum Computing"
    intro_text, conclusion_text = generate_placeholder_intro_conclusion(topic_example)

    print("--- Generated Introduction ---")
    print(intro_text)
    print("\n--- Generated Conclusion ---")
    print(conclusion_text)
    print("\n" + "="*50 + "\n")

    # 2. Test assemble_report_markdown
    # Use an ordered dictionary for sections_data to ensure ToC and report order
    example_sections = collections.OrderedDict()
    example_sections["Historical Context"] = SectionData(
        title="Historical Context",
        draft_content="The field of quantum computing has its roots in the early 20th century... (Detailed content here)",
        summary="Summary of historical context.", raw_data=[]
    )
    example_sections["Current Technological Advancements"] = SectionData(
        title="Current Technological Advancements",
        draft_content="Recent breakthroughs include the development of more stable qubits... (Detailed content here)",
        summary="Summary of advancements.", raw_data=[]
    )
    example_sections["Ethical Considerations"] = SectionData(
        title="Ethical Considerations",
        draft_content="The power of quantum computing raises several ethical questions... (Detailed content here)",
        summary="Summary of ethics.", raw_data=[]
    )
    example_sections["Future Outlook"] = SectionData(
        title="Future Outlook",
        draft_content="", # Test empty draft content
        summary="Summary of outlook.", raw_data=[]
    )

    example_references = [
        "Feynman, R. P. (1982). Simulating physics with computers. International Journal of Theoretical Physics, 21(6-7), 467-488.",
        "Deutsch, D. (1985). Quantum theory, the Church-Turing principle and the universal quantum computer. Proceedings of the Royal Society A, 400(1818), 97-117.",
        "Arute, F., Arya, K., Babbush, R., ... & Martinis, J. M. (2019). Quantum supremacy using a programmable superconducting processor. Nature, 574(7779), 505-510."
    ]

    report_title_example = "Project Kronos: An In-depth Analysis"

    full_report_md = assemble_report_markdown(
        report_title=report_title_example,
        introduction=intro_text,
        sections_data=example_sections,
        conclusion=conclusion_text,
        references_list=example_references,
        topic=topic_example # Pass the topic for the subtitle
    )

    print("--- Assembled Report Markdown (Test) ---")
    print(full_report_md)

    # Test anchor generation
    print("\n--- Anchor Link Tests ---")
    test_titles = ["Introduction", "Section 1: The Beginning", "Deep Dive into Data! (Analysis)", "  Extra Spaces  ", "References"]
    for tt in test_titles:
        print(f"Title: '{tt}' -> Anchor: '#{_create_anchor_link(tt)}'")

    print("\nTesting complete for report_assembler.py")
